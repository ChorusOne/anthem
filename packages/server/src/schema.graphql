type Query {
  # Cosmos APIs
  cosmosAccountBalances(address: String!): CosmosAccountBalances!
  cosmosAccountHistory(address: String!, fiat: String!): CosmosAccountHistory!
  cosmosTransaction(hash: String!, network: String!): CosmosTransaction!
  cosmosTransactions(
    address: String!
    startingPage: Float
    pageSize: Float
  ): CosmosTransactionResult!
  cosmosRewardsByValidator(address: String!): [AvailableReward!]!
  cosmosAccountInformation(address: String!): CosmosAccountInformation!
  cosmosValidatorDistribution(
    validatorAddress: String!
  ): CosmosValidatorDistribution!
  cosmosValidators(network: String!): [CosmosValidator!]!
  cosmosValidatorSets(network: String!): CosmosValidatorSet!
  cosmosLatestBlock(network: String!): CosmosBlockData!
  cosmosStakingPool(network: String!): CosmosStakingPool!
  cosmosStakingParameters(network: String!): CosmosStakingParameters!
  cosmosGovernanceProposals(network: String!): [CosmosGovernanceProposal!]!
  cosmosGovernanceParametersDeposit(
    network: String!
  ): CosmosGovernanceParametersDeposit!
  cosmosGovernanceParametersTallying(
    network: String!
  ): CosmosGovernanceParametersTallying!
  cosmosGovernanceParametersVoting(
    network: String!
  ): CosmosGovernanceParametersVoting!
  cosmosSlashingParameters(network: String!): CosmosSlashingParameters!
  cosmosDistributionCommunityPool(network: String!): [CosmosBalance!]!
  cosmosDistributionParameters(network: String!): CosmosDistributionParameters!

  # Oasis APIs
  oasisAccountBalances(address: String!): OasisAccountBalances!
  oasisAccountHistory(address: String!, fiat: String!): [OasisAccountHistory!]!
  oasisTransactions(
    address: String!
    startingPage: Float
    pageSize: Float
  ): OasisTransactionResult!
  oasisTransaction(hash: String!): OasisTransaction!
  oasisValidators: [OasisValidator!]!

  # Celo APIs
  celoAccountBalances(address: String!): CeloAccountBalances!
  celoAccountHistory(address: String!, fiat: String!): [CeloAccountSnapshot!]!
  celoTransactions(
    address: String!
    startingPage: Float
    pageSize: Float
  ): CeloTransactionResult!
  celoGovernanceTransactions(address: String!): [CeloTransaction!]!
  celoTransaction(hash: String!): CeloTransaction!
  celoSystemBalances: CeloSystemBalances!
  celoSystemHistory: [CeloSystemHistory!]!
  celoValidatorGroups: [CeloValidatorGroup!]!
  celoGovernanceProposals: CeloGovernanceProposalHistory!

  # Fiat price APIs
  fiatCurrencies: [FiatCurrency!]!
  fiatPriceHistory(fiat: String!, network: String!): [FiatPrice!]!
  fiatPriceData(currency: String!, fiat: String!): FiatPriceData!
  networkSummaries(fiat: String!): [NetworkSummary!]!
}

# *****************************************************************************
# Celo APIs

type CeloAccountBalances {
  address: String!
  height: String!
  availableGoldBalance: String!
  totalLockedGoldBalance: String!
  nonVotingLockedGoldBalance: String!
  votingLockedGoldBalance: String!
  pendingWithdrawalBalance: String!
  celoUSDValue: String!
  delegations: [CeloDelegation!]!
}

type CeloDelegation {
  group: String!
  totalVotes: String!
  activeVotes: String!
  pendingVotes: String!
}

type CeloAccountSnapshot {
  snapshotDate: String!
  address: String!
  height: String!
  snapshotReward: String!
  snapshotCommission: String!
  availableGoldBalance: String!
  totalLockedGoldBalance: String!
  nonVotingLockedGoldBalance: String!
  votingLockedGoldBalance: String!
  pendingWithdrawalBalance: String!
  celoUSDValue: String!
  delegations: [CeloDelegation!]!
}

type CeloTransactionResult {
  page: Float!
  limit: Float!
  data: [CeloTransaction!]!
  moreResultsExist: Boolean!
}

type CeloTransaction {
  blockNumber: Int!
  timestamp: String!
  hash: String!
  from: String
  to: String
  details: CeloTransactionDetails!
  tags: [CeloTransactionTags!]!
}

type CeloTransactionTags {
  eventname: String!
  source: String!
  parameters: String!
}

type CeloTransactionDetails {
  nonce: Float!
  gasLimit: Float!
  gasPrice: Float!
  gasUsed: Float!
  feeCurrency: String
  gatewayFeeRecipient: String
  gatewayFee: Float!
  to: String
  value: Float!
}

type CeloSystemBalances {
  height: String!
  goldTokenSupply: String!
  totalLockedGoldBalance: String!
  nonVotingLockedGoldBalance: String!
  totalCeloUSDValue: String
}

type CeloSystemHistory {
  BlockNumber: String!
  SnapshotDate: String!
  GoldTokenSupply: String!
  TotalLockedGoldBalance: String!
  NonVotingLockedGoldBalance: String!
  TotalCeloUSDValue: String!
}

type CeloValidatorGroup {
  group: String!
  name: String!
  metadataURL: String!
  blockNumber: Float!
  votingPower: Float!
  votingPowerFraction: String!
  capacityAvailable: Float!
  totalCapacity: Float!
  multiplier: Float!
  groupShare: Float!
  groupScore: Float!
  validatorDetails: [CeloValidatorDetail!]!
}

type CeloValidatorDetail {
  validatorAddress: String!
  validator_score: Float!
}

type CeloGovernanceProposalHistory {
  queuedProposals: [QueuedProposal!]!
  approvalProposals: [ApprovedProposal!]!
  referendumProposals: [ReferendumProposal!]!
  executionProposals: [ExecutionProposal!]!
  expiredProposals: [ExpiredProposal!]!
}

type QueuedProposal {
  proposalID: Float!
  index: Float!
  currentBlockNumber: Float!
  stage: String!
  proposer: String!
  upvotes: Float!
  proposalEpoch: Float!
  referendumEpoch: Float!
  executionEpoch: Float!
  expirationEpoch: Float!
  queuedAtBlockNumber: Float!
  deposit: Float!
  queuedAtTimestamp: Float!
  gist: String!
  title: String!
  description: String!
}

type ApprovedProposal {
  proposalID: Float!
  index: Float!
  currentBlockNumber: Float!
  stage: String!
  proposer: String!
  proposalEpoch: Float!
  referendumEpoch: Float!
  executionEpoch: Float!
  expirationEpoch: Float!
  queuedAtBlockNumber: Float!
  deposit: Float!
  queuedAtTimestamp: Float!
  gist: String!
  title: String!
  description: String!
}

type ReferendumProposal {
  proposalID: Float!
  index: Float!
  currentBlockNumber: Float!
  stage: String!
  proposer: String!
  yesVotes: Float!
  noVotes: Float!
  abstainVotes: Float!
  proposalEpoch: Float!
  referendumEpoch: Float!
  executionEpoch: Float!
  expirationEpoch: Float!
  queuedAtBlockNumber: Float!
  deposit: Float!
  queuedAtTimestamp: Float!
  gist: String!
  title: String!
  description: String!
}

type ExecutionProposal {
  proposalID: Float!
  index: Float!
  currentBlockNumber: Float!
  stage: String!
  proposer: String!
  yesVotes: Float!
  noVotes: Float!
  abstainVotes: Float!
  proposalEpoch: Float!
  referendumEpoch: Float!
  executionEpoch: Float!
  expirationEpoch: Float!
  queuedAtBlockNumber: Float!
  deposit: Float!
  queuedAtTimestamp: Float!
  gist: String!
  title: String!
  description: String!
}

type ExpiredProposal {
  proposalID: Float!
  currentBlockNumber: Float!
  stage: String!
  proposer: String!
  executed: Boolean
  queuedAtBlockNumber: Float!
  deposit: Float!
  queuedAtTimestamp: Float!
  gist: String!
  title: String!
  description: String!
}

# *****************************************************************************
# Oasis APIs

type OasisAccountBalances {
  available: String!
  staked: OasisBalance!
  unbonding: OasisBalance!
  rewards: String! # Not available yet
  commissions: String! # Not available yet
  meta: OasisAccountMeta!
  delegations: [OasisDelegation!]
}

type OasisValidator {
  address: String!
  name: String
  commission: Float!
  website: String
  iconUrl: String
  keybase: String
  email: String
  twitter: String
  active: Boolean
}

type OasisAccountHistory {
  date: String!
  height: Float!
  address: String!
  rewards: String!
  balance: String!
  meta: OasisAccountMeta!
  delegations: [OasisDelegation!]
  debonding_balance: OasisBalance!
  staked_balance: OasisBalance!
}

type OasisDelegation {
  delegator: String!
  validator: String!
  amount: String!
}

type OasisBalance {
  balance: String!
  shares: String!
}

type OasisAccountMeta {
  is_validator: Boolean!
  is_delegator: Boolean!
}

type OasisTransactionResult {
  page: Float!
  limit: Float!
  data: [OasisTransaction!]!
  moreResultsExist: Boolean!
}

type OasisTransaction {
  hash: String!
  fee: String!
  gas: Int!
  gas_price: String!
  height: Int!
  method: String!
  date: String!
  sender: String!
  data: OasisTransactionData!
}

enum OasisTransactionType {
  BURN
  TRANSFER
  ESCROW_ADD
  ESCROW_TAKE
  ESCROW_RECLAIM
  REGISTER_ENTITY
  REGISTER_NODE
  UNFREEZE_NODE
  REGISTER_RUNTIME
  RATE_EVENT
  BOUND_EVENT
  AMEND_COMMISSION_SCHEDULE
  UNKNOWN_EVENT
}

union OasisTransactionData =
    OasisBurnEvent
  | OasisTransferEvent
  | OasisEscrowAddEvent
  | OasisEscrowTakeEvent
  | OasisEscrowReclaimEvent
  | OasisRegisterEntityEvent
  | OasisRegisterNodeEvent
  | OasisUnfreezeNodeEvent
  | OasisRegisterRuntimeEvent
  | OasisRateEvent
  | OasisBoundEvent
  | OasisAmendCommissionScheduleEvent
  | OasisUnknownEvent

type OasisTransferEvent {
  type: OasisTransactionType!
  from: String!
  to: String!
  tokens: String!
}

type OasisBurnEvent {
  type: OasisTransactionType!
  owner: String
  tokens: String!
}

type OasisEscrowAddEvent {
  type: OasisTransactionType!
  to: String!
  tokens: String!
}

type OasisEscrowTakeEvent {
  type: OasisTransactionType!
  from: String!
  to: String!
  tokens: String!
}

type OasisEscrowReclaimEvent {
  type: OasisTransactionType!
  from: String!
  shares: String!
}

type OasisRegisterEntityEvent {
  type: OasisTransactionType!
  id: String
  nodes: [String!]
  allow_entity_signed_nodes: Boolean
}

type OasisRegisterNodeEvent {
  type: OasisTransactionType!
  id: String
  entity_id: String
  expiration: Float
}

type OasisUnfreezeNodeEvent {
  type: OasisTransactionType!
  id: String
}

type OasisRegisterRuntimeEvent {
  type: OasisTransactionType!
  id: String
  version: String!
}

type OasisRateEvent {
  type: OasisTransactionType!
  start: String!
  rate: String!
}

type OasisBoundEvent {
  type: OasisTransactionType!
  start: String!
  rate_min: String!
  rate_max: String!
}

type OasisAmendCommissionScheduleEvent {
  type: OasisTransactionType!
  rates: [String!]
  bounds: [String!]
}

type OasisUnknownEvent {
  type: OasisTransactionType!
  method_name: String!
}

# *****************************************************************************
# Cosmos APIs

type CosmosRewardHistory {
  balance: String!
  height: Int!
  address: String!
  timestamp: String!
  denom: String!
}

type CosmosCommissionHistory {
  balance: String!
  height: Int!
  validator: String!
  timestamp: String!
  denom: String!
}

type CosmosDelegationHistory {
  balance: String!
  address: String!
  timestamp: String!
}

type CosmosBalanceHistory {
  address: String!
  denom: String!
  balance: String!
  height: Int!
  timestamp: String!
  chain: String!
}

type FiatPrice {
  price: Float!
  timestamp: String!
}

type CosmosAccountHistory {
  balanceHistory: [CosmosBalanceHistory!]!
  delegations: [CosmosDelegationHistory!]!
  unbondings: [CosmosDelegationHistory!]!
  delegatorRewards: [CosmosRewardHistory!]!
  validatorCommissions: [CosmosCommissionHistory!]!
  fiatPriceHistory: [FiatPrice!]!
}

type AvailableReward {
  reward: [CosmosBalance!]
  validator_address: String!
}

type CosmosAccountBalances {
  balance: [CosmosBalance!]
  rewards: [CosmosBalance!]
  delegations: [Delegation!]
  unbonding: [UnbondingDelegation!]
  commissions: [CosmosBalance!]
}

type CosmosBalance {
  denom: String!
  amount: String!
}

type Delegation {
  delegator_address: String!
  validator_address: String!
  shares: String!
}

type UnbondingDelegation {
  delegator_address: String!
  validator_address: String!
  entries: [UnbondingDelegationEntry!]!
}

type UnbondingDelegationEntry {
  balance: String!
  initial_balance: String!
  creation_height: String!
  completion_time: String!
}

type CosmosAccountInformation {
  type: String!
  value: Account!
}

type Account {
  account_number: String!
  address: String!
  coins: [AccountCoin!]
  public_key: PubKey
  sequence: String!
}

type AccountCoin {
  denom: String!
  amount: String!
}

type CosmosTransactionResult {
  page: Float!
  limit: Float!
  data: [CosmosTransaction!]!
  moreResultsExist: Boolean!
}

type CosmosTransaction {
  hash: String!
  height: String!
  log: [LogMessage]!
  gaswanted: String!
  gasused: String!
  memo: String
  fees: TxFee!
  tags: [Tag!]
  msgs: [TxMsg!]!
  timestamp: String!
  chain: String!
  events: [CosmosTransactionEvent!]
}

type CosmosTransactionEvent {
  type: String!
  attributes: [EventAttributes!]!
}

type EventAttributes {
  key: String!
  value: String
}

type LogMessage {
  code: Int
  message: String
  success: Boolean
  log: String
  msg_index: String
}

type Tag {
  key: String!
  value: String
}

type Tx {
  type: String!
  value: TxValue!
}

type TxValue {
  fee: TxFee!
  memo: String!
  msg: [TxMsg!]
  signatures: [TxSignature!]
}

type TxFee {
  amount: [CosmosBalance!]
  gas: String!
}

type TxMsg {
  type: String!
  value: TxMsgValue
}

# Could collapse this into a single type with all optional fields:
union TxMsgValue =
    MsgSend
  | MsgVote
  | MsgDelegate
  | MsgSubmitProposal
  | MsgBeginRedelegate
  | MsgModifyWithdrawAddress
  | MsgBeginRedelegateLegacy
  | MsgWithdrawDelegationReward
  | MsgParameterChangeProposal
  | MsgWithdrawValidatorCommission

type MsgSend {
  amounts: [CosmosBalance!]
  to_address: String
  from_address: String
}

type MsgDelegate {
  amount: CosmosBalance!
  delegator_address: String
  validator_address: String
}

type MsgSubmitProposal {
  title: String!
  description: String!
  proposal_type: String!
  proposer: String!
  initial_deposit: [CosmosBalance!]
}

type MsgBeginRedelegate {
  amount: CosmosBalance!
  delegator_address: String
  validator_src_address: String!
  validator_dst_address: String!
}

type MsgBeginRedelegateLegacy {
  shares_amount: String!
  delegator_address: String
  validator_src_address: String!
  validator_dst_address: String!
}

type MsgModifyWithdrawAddress {
  withdraw_address: String
  validator_address: String
}

type MsgWithdrawDelegationReward {
  delegator_address: String
  validator_address: String
}

type MsgParameterChangeProposal {
  content: ParameterChangeProposal!
  proposer: String!
  initial_deposit: [CosmosBalance!]
}

type ParameterChangeProposal {
  type: String!
  value: ParameterChangeValue!
}

type ParameterChangeValue {
  title: String!
  description: String!
}

type MsgWithdrawValidatorCommission {
  validator_address: String
}

type MsgVote {
  proposal_id: String!
  voter: String!
  option: String!
}

type TxSignature {
  pub_key: PubKey!
  signature: String!
}

type PubKey {
  type: String!
}

type CosmosValidatorDistribution {
  operator_address: String!
  self_bond_rewards: [CosmosBalance!]
  val_commission: [CosmosBalance!]
}

type CosmosValidator {
  operator_address: String!
  consensus_pubkey: String!
  jailed: Boolean!
  status: Int!
  tokens: String!
  delegator_shares: String!
  description: ValidatorDescription!
  unbonding_height: String!
  unbonding_time: String!
  commission: ValidatorCommission!
  min_self_delegation: String!
}

type ValidatorDescription {
  moniker: String!
  identity: String!
  website: String!
  details: String!
}

type ValidatorCommission {
  update_time: String!
  commission_rates: CommissionRates!
}

type CommissionRates {
  rate: String!
  max_rate: String!
  max_change_rate: String!
}

type CosmosValidatorSet {
  block_height: Int!
  validators: [ValidatorSetItem!]
}

type ValidatorSetItem {
  address: String!
  pub_key: String!
  voting_power: String!
  proposer_priority: String!
}

type CosmosBlockData {
  block: Block!
}

type Block {
  header: BlockHeader!
}

type BlockHeader {
  chain_id: String!
  height: String!
  time: String!
  num_txs: String!
  total_txs: String!
  last_commit_hash: String!
  data_hash: String!
  validators_hash: String!
  next_validators_hash: String!
  consensus_hash: String!
  app_hash: String!
  last_results_hash: String!
  evidence_hash: String!
  proposer_address: String!
}

type CosmosStakingPool {
  loose_tokens: String
  bonded_tokens: String
  not_bonded_tokens: String
  inflation_last_time: String
  inflation: String
  date_last_commission_reset: String
  prev_bonded_shares: String
}

type CosmosStakingParameters {
  inflation_rate_change: String
  inflation_max: String
  inflation_min: String
  goal_bonded: String
  unbonding_time: String!
  max_validators: Int!
  max_entries: Int!
  bond_denom: String!
}

type CosmosGovernanceProposal {
  proposal_id: Int
  title: String
  description: String
  proposal_type: String
  proposal_status: String!
  final_tally_result: TallyResult!
  submit_time: String!
  total_deposit: [CosmosBalance!]
  voting_start_time: String!
}

type TallyResult {
  yes: String!
  abstain: String!
  no: String!
  no_with_veto: String!
}

type CosmosGovernanceParametersDeposit {
  min_deposit: [CosmosBalance!]
  max_deposit_period: String!
}

type CosmosGovernanceParametersTallying {
  threshold: String!
  veto: String!
  governance_penalty: String
}

type CosmosGovernanceParametersVoting {
  voting_period: String!
}

type CosmosSlashingParameters {
  max_evidence_age: String!
  signed_blocks_window: String!
  min_signed_per_window: String!
  double_sign_unbond_duration: String
  downtime_unbond_duration: String
  slash_fraction_double_sign: String!
  slash_fraction_downtime: String!
}

type CosmosDistributionParameters {
  base_proposer_reward: String!
  bonus_proposer_reward: String!
  community_tax: String!
}

type Price {
  price: Float!
}

type FiatCurrency {
  name: String!
  symbol: String!
  letter: String!
}

type FiatPriceData {
  price: Float!
  lastDayChange: Float!
}

type NetworkSummary {
  name: String!
  tokenPrice: Float
  lastDayChange: Float
  marketCapitalization: Float
  expectedReward: Float
  inflation: Float
  supportsLedger: Boolean
}
